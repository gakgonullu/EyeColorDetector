# -*- coding: utf-8 -*-
"""pupil.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lQfbAIVqg4pIrkdrolHqzwzBeJKklqFg
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Load the image
img = cv2.imread('/content/eye8.jpg')

# Convert the image to grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Apply Gaussian blur to reduce noise
blur = cv2.GaussianBlur(gray, (5, 5), 10)

# Apply adaptive thresholding to segment the pupil
thresh = cv2.adaptiveThreshold(blur, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY_INV, 11, 2)

# Apply morphological operations to remove noise and smooth edges
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
closed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
opened = cv2.morphologyEx(closed, cv2.MORPH_OPEN, kernel)

# Try to detect a circle in the preprocessed image with HoughCircles
circles = cv2.HoughCircles(opened, cv2.HOUGH_GRADIENT, 4, 200, param1=20, param2=150, minRadius=0, maxRadius=0)

# If a circle is detected, check if it's black-ish
if circles is not None:
    circles = np.round(circles[0, :]).astype("int")
    for (x, y, r) in circles:
        mask = np.zeros_like(gray)
        cv2.circle(mask, (x, y), r, 255, -1)
        avg_color = cv2.mean(img, mask=mask)[:3]
        print(avg_color)
        if avg_color[0] <= 20 and avg_color[1] <= 20 and avg_color[2] <= 20:
            cv2.circle(img, (x, y), r, (0, 255, 0), 2)
            break


# Display the image with the detected circle
cv2_imshow(img)
cv2.waitKey(0)
cv2.destroyAllWindows()

